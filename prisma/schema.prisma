generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../generated/type-graphql"
  emitTranspiledCode = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  email         String?       @unique
  emailVerified Boolean?      @map("email_verified")
  picture       String?
  role          Role          @default(user)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  customer      Customer?
  subscription  Subscription?

  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Product {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  prices      Price[]

  @@map("products")
}

model Price {
  id                String         @id @default(cuid())
  productId         String         @map("product_id")
  active            Boolean        @default(false)
  currency          String
  interval          PriceInterval?
  unitAmount        Int?           @map("unit_amount")
  interval_count    Int?
  trial_period_days Int?
  type              PriceType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @default(now()) @map("updated_at")
  product           Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]

  @@map("prices")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique @map("user_id")
  priceId              String
  status               SubscriptionStatus
  start_date           DateTime?
  ended_at             DateTime?
  trial_end            DateTime?
  trial_start          DateTime?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  metadata             Json?
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @default(now()) @map("updated_at")
  price                Price              @relation(fields: [priceId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}

enum Role {
  admin
  user
}
